[{"categories":null,"content":"ssh秘钥方式 首先在服务器生成秘钥 参考 ：参考 - name: Deploy to Staging server uses: easingthemes/ssh-deploy@v2.1.6 env: SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_KEY }} ARGS: \"-rltgoDzvO\" SOURCE: './public/' #仓库根路径 REMOTE_HOST: ${{ secrets.SSH_HOST }} REMOTE_USER: ${{ secrets.SSH_USERNAME }} TARGET: '/www/wwwroot/blog.gojw.xyz/mybolg/' #目标服务器的路径 EXCLUDE: \"/dist/, /node_modules/\" #排除文件夹 ","date":"2021年04月03日","objectID":"/2021-04-03-githubActions%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/:1:0","tags":["centos","actions","github"],"title":"githubActions部署文件到服务器","uri":"/2021-04-03-githubActions%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":null,"content":"密码方式 - name: SSH Server Deploy uses: kostya-ten/ssh-server-deploy@v4 with: host: ${{ secrets.SSH_HOST }} port: ${{ secrets.DEPLOY_PORT }} username: ${{ secrets.SSH_USERNAME }} password: ${{ secrets.DEPLOY_PASSWORD }} scp_source: ./public/ scp_target: /www/wwwroot/blog.gojw.xyz/mybolg/ 测试两种action ， ssh的方式速度快，账号密码的 至少3分钟，ssh几秒就可以完成。 ","date":"2021年04月03日","objectID":"/2021-04-03-githubActions%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/:2:0","tags":["centos","actions","github"],"title":"githubActions部署文件到服务器","uri":"/2021-04-03-githubActions%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"categories":null,"content":"支付宝二合一代码更新 ","date":"2020年10月21日","objectID":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:1:0","tags":["双十一","喵币","淘宝"],"title":"2020双十一刷喵币脚本使用教程(10月28更新可用)","uri":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"概述 今年双十一还是跟喵币有关，刷喵币，得红包。 ","date":"2020年10月21日","objectID":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:2:0","tags":["双十一","喵币","淘宝"],"title":"2020双十一刷喵币脚本使用教程(10月28更新可用)","uri":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"教程 8.9.2可用，9.5失效 QQ群有8.9.2版本 淘宝8.9.2下载链接 脚本地址 ","date":"2020年10月21日","objectID":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:3:0","tags":["双十一","喵币","淘宝"],"title":"2020双十一刷喵币脚本使用教程(10月28更新可用)","uri":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"注意 授予auto.js 无障碍权限、悬浮窗权限 QQ交流群：825455296 QQ喵币互刷脚本交流2群：252458085 3.0fu置文本🎵n7M0c8WuONt📲打K开👉木/兆宝👈或点几连结 https://m.tb.cn/h.4XdGltx 至瀏lan嘂..【┌;快來咊我壹起擼貓贏㈠000元紅包`灬.°】 ","date":"2020年10月21日","objectID":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:4:0","tags":["双十一","喵币","淘宝"],"title":"2020双十一刷喵币脚本使用教程(10月28更新可用)","uri":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"视频教程 ","date":"2020年10月21日","objectID":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:5:0","tags":["双十一","喵币","淘宝"],"title":"2020双十一刷喵币脚本使用教程(10月28更新可用)","uri":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"main.js 淘宝、支付宝二合一（分享任务会卡住，建议使用下面的三合一脚本） auto.waitFor(); auto.setMode(\"normal\"); console.show(); var postpone = rawInput(\"全局延迟设定(建议1-5，越低越快，越高越稳定但慢\"); postpone = postpone * 1000; console.log(\"准备进入活动界面，若未出现进入界面成功的提示，请开高延迟\"); function startApp(url) { app.startActivity({ action: \"VIEW\", data: url }) sleep(5000); work(url.substring(0, 6)); sleep(postpone); levelUp(); sleep(postpone); fuckCat(); } function work(s) { console.log(\"进入活动界面成功\"); text(\"赚喵币\").findOne().click(); sleep(postpone * 2); console.log(\"开始执行任务\"); //taobao if (s == \"taobao\") { mission(\"去浏览\"); mission(\"去完成\"); mission(\"去逛逛\"); mission(\"去搜索\"); } //alipay else mission(\"逛一逛\"); } function mission(s) { var start = 0; if (s == \"去完成\") start = 1; while (true) { var t = new Date(); var golook = text(s).findOnce(start); if (golook) { golook.click(); sleep(postpone * 2); var x = random(3, 4); while (x--) { t = new Date(); sleep(5000 + t.getSeconds() * 10); swipe(700 + t.getSeconds(), 2000 - t.getSeconds() * 10, 200 + t.getMilliseconds(), 700 + t.getMilliseconds(), 1000); if (text(\"50000\").findOnce()) { start += 1; break; } } back(); sleep(postpone); } else break; } console.log(\"任务%s完成。\", s); } function levelUp() { textContains(\"关闭\").findOne().click(); sleep(postpone); console.log(\"开始升级\"); var merge = textContains(\"喂猫升级\").findOne(); while (true) { merge.click(); sleep(postpone); var close = textContains(\"关闭\").findOnce(); if (close) { close.click(); } sleep(postpone / 2); var coin = textContains(\"我的喵币\").findOnce().text().substr(5); if (coin \u003c \"60000\") break; } } function fuckCat() { console.log(\"开始拍猫\"); var num = rawInput(\"输入拍猫次数（中途不可退，次数别太多）,输入-1退出\"); while (num--) { var cat = text(\"我的猫，点击撸猫\").findOne(); click(cat.bounds().centerX() + random(-10, 10) * 10, cat.bounds().centerY() + random(-10, 10) * 10); sleep(200 + random(-100, 100)); } } startApp(\"taobao://pages.tmall.com/wow/z/hdwk/act-20201111/index\"); toast(\"切换到支付宝\"); sleep(postpone * 3); startApp(\"alipays://platformapi/startapp?appId=68687502\"); console.log(\"完活儿\"); device.vibrate(1000); 京东，淘宝，支付宝三合一 10.27更新 /** * 淘宝+京东双十一活动脚本 * 支持淘宝\\支付宝\\京东任务自动执行 * * Author: Hyue418 * Date: 2020/10/21 * Time: 21:16 * Versions: 2.2.2 * Github: https://github.com/hyue418 */ try { auto(); } catch (error) { toast(\"请手动开启无障碍并授权给Auto.js\"); sleep(2000); exit(); } console.show(); //初始化参数 versions = 'V2.2.2'; speed = 1; float = 1.25; patNum = 0; swipeTips = \"滑啊滑啊滑啊滑\"; taskChooseList = [\"淘宝赚喵币\", \"淘宝拍猫猫\", \"支付宝赚喵币\", \"京东全民营业\", \"调节脚本速度\"]; speedChooseList = [0.75, 1, 1.25, 1.5, 1.75, 2, 3]; taobaoActivityData = \"taobao://pages.tmall.com/wow/z/hdwk/act-20201111/index\"; activityActivityData = \"alipays://platformapi/startapp?appId=68687502\"; height = device.height; width = device.width; setScreenMetrics(width, height); positive = false; speedAdjustment = false; alert(\"【淘宝+京东双十一活动脚本 \" + versions + \"】\", \"脚本执行过程请勿手动点击按钮，否则脚本执行可能会错乱，导致任务失败\\n\\n执行淘宝任务时请确保使用低版本淘宝（V9.5及以下），否则无法获取奖励\\n\\n最新版脚本请到GitHub获取\\nGitHub: https://github.com/hyue418\\n\\nPowered By Hyue418\"); // 选择任务 taskChoose(); /** * 任务选择 */ function taskChoose() { var options = dialogs.multiChoice(\"需要执行的任务\", taskChooseList); if (options == '') { toastLog(\"脚本已退出\"); exit(); } //勾选调速时弹出速度选择 options.indexOf(4) \u003e -1 \u0026\u0026 speedChoose(); //选中拍猫猫时弹出次数选择 if (options.indexOf(1) \u003e -1) { var frequencyOptions = [10, 30, 50, 100, 200, 300]; var i = dialogs.select( \"拍猫猫次数\", frequencyOptions ); if (i == -1) { toastLog(\"脚本已退出\"); exit(); } //拍猫次数加随机数，向下取整 patNum = Math.floor(ramdomByFloat(frequencyOptions[i])); toastLog(\"选择拍猫猫\" + frequencyOptions[i] + \"次,加随机数至\" + patNum + \"次\"); } runOptions(options); } /** * 速度选择 */ function speedChoose() { var option = dialogs.singleChoice(\"操作间隔的倍数（越大越慢）\", speedChooseList, 1); if (option == -1) { toastLog(\"脚本已退出\"); exit(); } speed = speedChooseList[option]; } /** * 执行选中任务 * @param options 选项数组 */ function runOptions(options) { log(\"淘宝+京东双十一活动脚本\" + versions + \"\\n\"); log(\"脚本执行期间请勿手动点击按钮\"); log(\"当前脚本操作时间间隔为【\" + speed + \"倍】\"); log(\"=========================\"); log(\"GitHub: https://github.com/hyue418\"); l","date":"2020年10月21日","objectID":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/:6:0","tags":["双十一","喵币","淘宝"],"title":"2020双十一刷喵币脚本使用教程(10月28更新可用)","uri":"/2020-10-21-%E5%8F%8C%E5%8D%81%E4%B8%80%E5%88%B7%E5%96%B5%E5%B8%81%E8%84%9A%E6%9C%AC%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"},{"categories":null,"content":"下载 ","date":"2020年10月09日","objectID":"/2020-10-09-soul%E4%B8%8B%E8%BD%BD%E9%9F%B3%E9%A2%91/:1:0","tags":["soul","音频","wav","mp3"],"title":"soul下载音频","uri":"/2020-10-09-soul%E4%B8%8B%E8%BD%BD%E9%9F%B3%E9%A2%91/"},{"categories":null,"content":"前言 利用自定义注解和切面为方法添加日志打印功能 ","date":"2020年09月12日","objectID":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/:1:0","tags":["java","springboot","aop"],"title":"springboot应用之切面日志","uri":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/"},{"categories":null,"content":"一、效果 com.example.demo1.Aspet.LogAspect :------------------------------- start --------------------------com.example.demo1.Aspet.LogAspect : Method detail Description:login打印com.example.demo1.Aspet.LogAspect : Request Args:[{\"email\":\"2419254437@qq.com\",\"username\":\"fff\"}]com.example.demo1.Aspet.LogAspect : Request method:POSTcom.example.demo1.Aspet.LogAspect : Request URL:http://localhost/user/logincom.example.demo1.Aspet.LogAspect : Request Class and Method:com.example.demo1.controller.UserController.logincom.example.demo1.Aspet.LogAspect :------------------------------- End --------------------------com.example.demo1.Aspet.LogAspect : login打印，Response result :{\"email\":\"2419254437@qq.com\",\"username\":\"fff\"}com.example.demo1.Aspet.LogAspect : Time Consuming:9906ms ","date":"2020年09月12日","objectID":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/:2:0","tags":["java","springboot","aop"],"title":"springboot应用之切面日志","uri":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/"},{"categories":null,"content":"二、使用步骤 ","date":"2020年09月12日","objectID":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/:3:0","tags":["java","springboot","aop"],"title":"springboot应用之切面日志","uri":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/"},{"categories":null,"content":"1. 引入相关依赖 \u003cdependency\u003e\u003cgroupId\u003eorg.springframework.boot\u003c/groupId\u003e\u003cartifactId\u003espring-boot-starter-aop\u003c/artifactId\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003ecom.alibaba\u003c/groupId\u003e\u003cartifactId\u003efastjson\u003c/artifactId\u003e\u003cversion\u003e1.2.62\u003c/version\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.projectlombok\u003c/groupId\u003e\u003cartifactId\u003elombok\u003c/artifactId\u003e\u003coptional\u003etrue\u003c/optional\u003e\u003c/dependency\u003e ","date":"2020年09月12日","objectID":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/:3:1","tags":["java","springboot","aop"],"title":"springboot应用之切面日志","uri":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/"},{"categories":null,"content":"2. 创建自定义注解 PrintlnLog @Retention(RetentionPolicy.RUNTIME) //指定注释要保留多长时间 @Target({ElementType.METHOD}) //对方法生效 @Documented //表明这个注解 由 javadoc记录的 public @interface PrintlnLog { /** * 自定义日志描述信息文案 * * @return */ String description() default \"\"; } ","date":"2020年09月12日","objectID":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/:3:2","tags":["java","springboot","aop"],"title":"springboot应用之切面日志","uri":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/"},{"categories":null,"content":"3. 创建切面 LogAspect 并指定切面入口 @Slf4j @Aspect @Component //扫描不到应在启动类添加对应的 ComponentScan public class LogAspect { private static final String LINE_SEPARATOR = System.lineSeparator(); /** * 以自定义 @PrintlnLog 注解作为切面入口 */ @Pointcut(\"@annotation(com.example.demo1.Aspet.PrintlnLog)\") public void PrintlnLog() { } @Before(\"PrintlnLog()\") public void doBefore(JoinPoint joinPoint) throws Throwable { ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes(); HttpServletRequest request = attributes.getRequest(); String methodDetailDescription = this.getAspectMethodLogDescJP(joinPoint); log.info(\"------------------------------- start --------------------------\"); /** * 打印自定义方法描述 */ log.info(\"Method detail Description: {}\", methodDetailDescription); /** * 打印请求入参 */ //JSON 需引入依赖 fastjson log.info(\"Request Args: {}\", JSON.toJSONString(joinPoint.getArgs())); /** * 打印请求方式 */ log.info(\"Request method: {}\", request.getMethod()); /** * 打印请求 url */ log.info(\"Request URL: {}\", request.getRequestURL().toString()); /** * 打印调用方法全路径以及执行方法 */ log.info(\"Request Class and Method: {}.{}\", joinPoint.getSignature().getDeclaringTypeName(), joinPoint.getSignature().getName()); } @Around(\"PrintlnLog()\") public Object doAround(ProceedingJoinPoint proceedingJoinPoint) throws Throwable { String aspectMethodLogDescPJ = getAspectMethodLogDescPJ(proceedingJoinPoint); long startTime = System.currentTimeMillis(); Object result = proceedingJoinPoint.proceed(); /** * 输出结果 */ log.info(\"{}，Response result : {}\", aspectMethodLogDescPJ, JSON.toJSONString(result)); /** * 方法执行耗时 */ log.info(\"Time Consuming: {} ms\", System.currentTimeMillis() - startTime); return result; } @After(\"PrintlnLog()\") public void doAfter(JoinPoint joinPoint) throws Throwable { log.info(\"------------------------------- End --------------------------\" + LINE_SEPARATOR); } public String getAspectMethodLogDescJP(JoinPoint joinPoint) throws Exception { String targetName = joinPoint.getTarget().getClass().getName(); String methodName = joinPoint.getSignature().getName(); Object[] arguments = joinPoint.getArgs(); return getAspectMethodLogDesc(targetName, methodName, arguments); } /** * @param proceedingJoinPoint * @author xiaofu * @description @PrintlnLog 注解作用的切面方法详细细信息 * @date 2020/7/15 10:34 */ public String getAspectMethodLogDescPJ(ProceedingJoinPoint proceedingJoinPoint) throws Exception { String targetName = proceedingJoinPoint.getTarget().getClass().getName(); String methodName = proceedingJoinPoint.getSignature().getName(); Object[] arguments = proceedingJoinPoint.getArgs(); return getAspectMethodLogDesc(targetName, methodName, arguments); } public String getAspectMethodLogDesc(String targetName, String methodName, Object[] arguments) throws Exception { Class targetClass = Class.forName(targetName); Method[] methods = targetClass.getMethods(); StringBuilder description = new StringBuilder(\"\"); for (Method method : methods) { if (method.getName().equals(methodName)) { Class[] clazzs = method.getParameterTypes(); if (clazzs.length == arguments.length) { description.append(method.getAnnotation(PrintlnLog.class).description()); break; } } } return description.toString(); } } ","date":"2020年09月12日","objectID":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/:3:3","tags":["java","springboot","aop"],"title":"springboot应用之切面日志","uri":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/"},{"categories":null,"content":"4. 创建方法并在方法上添加自定义注解 @PostMapping(\"/login\") @PrintlnLog(description = \"login打印\") public User login(@RequestBody @Valid User user){ return user; } ","date":"2020年09月12日","objectID":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/:3:4","tags":["java","springboot","aop"],"title":"springboot应用之切面日志","uri":"/2020-09-12-springboot%E5%BA%94%E7%94%A8%E4%B9%8B%E5%88%87%E9%9D%A2%E6%97%A5%E5%BF%97/"},{"categories":null,"content":"格式转换 必须是特定格式的 wav文件，转换器地址： https://github.com/jw-star/myFigurebed/raw/master/Soul%E5%BD%95%E9%9F%B3%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%E5%99%A82.1.zip 解压里面有教程 将需要转换的录音文件(不只mp3格式，其他格式也可以)放入MP3文件夹里面（支持批量转换）。 双击运行run.bat文件，等待出现——Soul——之后，按任意键退出。 转换成功的录音文件保存在WAV文件夹中，录音文件转换完毕！！！ 将文件发送到手机上，上传 ","date":"0001年01月01日","objectID":"/2020-09-09-soul%E4%B8%8A%E4%BC%A0%E9%95%BF%E9%9F%B3%E9%A2%91/:1:0","tags":["soul","音频","wav","mp3"],"title":"soul上传长音频","uri":"/2020-09-09-soul%E4%B8%8A%E4%BC%A0%E9%95%BF%E9%9F%B3%E9%A2%91/"},{"categories":null,"content":"上传 ","date":"0001年01月01日","objectID":"/2020-09-09-soul%E4%B8%8A%E4%BC%A0%E9%95%BF%E9%9F%B3%E9%A2%91/:2:0","tags":["soul","音频","wav","mp3"],"title":"soul上传长音频","uri":"/2020-09-09-soul%E4%B8%8A%E4%BC%A0%E9%95%BF%E9%9F%B3%E9%A2%91/"},{"categories":null,"content":" obj == \"undefined\" || obj == null || obj == '' variable1 !== null || variable1 !== undefined || variable1 !== '' ","date":"0001年01月01日","objectID":"/2020-08-27-js%E5%88%A4%E6%96%AD%E7%A9%BAnull/:0:0","tags":["前端","js"],"title":"2020-08-27-js判断空，null","uri":"/2020-08-27-js%E5%88%A4%E6%96%AD%E7%A9%BAnull/"},{"categories":null,"content":"问题 yData0:{zyxhId: null, deptNumber:null,…}1:{zyxhId: null, deptNumber:null,…}2:{zyxhId: null, deptNumber:null,…} var temp= $(this).attr(\"id\"); // var a= yData[i].temp; 错误用法 var a= yData[i][temp] ; 正确用法 上面的代码看似没问题，.temp数组[i]的对象值，但是取不出来值。 原因：js会把temp看做 对象的 key 值，对象中根本没有 key为 temp，永远取不出来值 ","date":"0001年01月01日","objectID":"/2020-08-25-js%E6%95%B0%E7%BB%84%E5%8F%96%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/:0:1","tags":["js","前端"],"title":"js数组取值的两种方式","uri":"/2020-08-25-js%E6%95%B0%E7%BB%84%E5%8F%96%E5%80%BC%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"},{"categories":null,"content":"layer关闭弹窗，刷新父页面 //获取index不要写在函数里， //可能获取不到index var index = parent.layer.getFrameIndex(window.name); function closeFram() { window.parent.refreshPage() //调用父页面方法刷新表格 parent.layer.close(index); //关闭当前页面，写在最后面 } ","date":"0001年01月01日","objectID":"/2020-08-23-layer%E5%85%B3%E9%97%AD-%E5%BC%B9%E7%AA%97%E5%88%B7%E6%96%B0%E7%88%B6%E9%A1%B5%E9%9D%A2/:1:0","tags":["前端","layui"],"title":"layer关闭弹窗，刷新父页面","uri":"/2020-08-23-layer%E5%85%B3%E9%97%AD-%E5%BC%B9%E7%AA%97%E5%88%B7%E6%96%B0%E7%88%B6%E9%A1%B5%E9%9D%A2/"},{"categories":null,"content":"奈飞观看条件 奈飞账号：可以某宝买，每月8元左右； 科学上网工具：没有被奈飞屏蔽的服务器ip；如：161开头的ip ","date":"0001年01月01日","objectID":"/2020-05-30-netflix%E5%A5%88%E9%A3%9E%E8%A7%82%E7%9C%8B/:1:0","tags":["奈飞","vps"],"title":"netflix奈飞观看","uri":"/2020-05-30-netflix%E5%A5%88%E9%A3%9E%E8%A7%82%E7%9C%8B/"},{"categories":null,"content":"电脑端观看 谷歌浏览器，访问奈飞官网，登录某宝买的账号就可以了。 https://ae01.alicdn.com/kf/H6f04a5ca03b841ddb734bf8421fcc5f3X.pnghttps://ae01.alicdn.com/kf/H6f04a5ca03b841ddb734bf8421fcc5f3X.png \" https://ae01.alicdn.com/kf/H6f04a5ca03b841ddb734bf8421fcc5f3X.png ","date":"0001年01月01日","objectID":"/2020-05-30-netflix%E5%A5%88%E9%A3%9E%E8%A7%82%E7%9C%8B/:2:0","tags":["奈飞","vps"],"title":"netflix奈飞观看","uri":"/2020-05-30-netflix%E5%A5%88%E9%A3%9E%E8%A7%82%E7%9C%8B/"},{"categories":null,"content":"手机端观看 在apkpure下载奈飞的历史版本，华为测试v3的版本可以观看奈飞。 手机端下载链接，大概在第15页 ","date":"0001年01月01日","objectID":"/2020-05-30-netflix%E5%A5%88%E9%A3%9E%E8%A7%82%E7%9C%8B/:3:0","tags":["奈飞","vps"],"title":"netflix奈飞观看","uri":"/2020-05-30-netflix%E5%A5%88%E9%A3%9E%E8%A7%82%E7%9C%8B/"},{"categories":null,"content":"docker-compose 安装 酷q机器人 ","date":"0001年01月01日","objectID":"/2020-04-16-docker-compose%E5%AE%89%E8%A3%85%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA/:1:0","tags":["酷q","doker"],"title":"docker-compose 安装 酷q机器人","uri":"/2020-04-16-docker-compose%E5%AE%89%E8%A3%85%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":null,"content":"概述 之前用 werobot 对接了微信公众号，但是微信公众号限制太大，所以看了下怎么用qq机器人解决问题 ","date":"0001年01月01日","objectID":"/2020-04-16-docker-compose%E5%AE%89%E8%A3%85%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA/:1:1","tags":["酷q","doker"],"title":"docker-compose 安装 酷q机器人","uri":"/2020-04-16-docker-compose%E5%AE%89%E8%A3%85%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":null,"content":"安装 目录结构 https://ae01.alicdn.com/kf/H1b4e29a4e21a44b5ab1fb188b618215d0.pnghttps://ae01.alicdn.com/kf/H1b4e29a4e21a44b5ab1fb188b618215d0.png \" https://ae01.alicdn.com/kf/H1b4e29a4e21a44b5ab1fb188b618215d0.png docker-compose.yml version:\"3\"services:cqhttp:image:richardchien/cqhttp:latestvolumes:- \"./coolq:/home/user/coolq\"# 用于保存COOLQ文件的目录environment:- COOLQ_ACCOUNT=169324812# 指定要登陆的QQ号，用于自动登录- FORCE_ENV=true- CQHTTP_USE_HTTP=false- CQHTTP_USE_WS=false- CQHTTP_USE_WS_REVERSE=true- CQHTTP_WS_REVERSE_API_URL=ws://nonebot:8080/ws/api/- CQHTTP_WS_REVERSE_EVENT_URL=ws://nonebot:8080/ws/event/depends_on:- nonebotports:- 9000:9000nonebot:build:./nonebot# 构建nonebot执行环境，Dockerfile见下面的例子expose:- \"8080\"environment:- TZ=Asia/Shanghaivolumes:- \"./qbot:/root/qbot\"# 项目文件所在目录command:python3 /root/qbot/bot.py Dockerfile FROM alpineRUN apk add --no-cache tzdata python3 py3-multidict py3-yarl \u0026\u0026 \\pip3 install --upgrade pip \u0026\u0026 \\pip3 install --no-cache-dir \"nonebot[scheduler]\" \u0026\u0026 \\pip3 install requests qbot文件夹上传编写好的代码 运行 docker-compose up --build docker-compose up --build -d //后台运行 浏览器访问 ip:9000 输入密码，默认：MAX8char ，密码参考于：密码参考 ","date":"0001年01月01日","objectID":"/2020-04-16-docker-compose%E5%AE%89%E8%A3%85%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA/:1:2","tags":["酷q","doker"],"title":"docker-compose 安装 酷q机器人","uri":"/2020-04-16-docker-compose%E5%AE%89%E8%A3%85%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":null,"content":"参考文章 NoneBot:NoneBot 是一个基于 酷Q 的 Python 异步 QQ 机器人框架 docker-compose部署参考 ","date":"0001年01月01日","objectID":"/2020-04-16-docker-compose%E5%AE%89%E8%A3%85%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA/:1:3","tags":["酷q","doker"],"title":"docker-compose 安装 酷q机器人","uri":"/2020-04-16-docker-compose%E5%AE%89%E8%A3%85%E9%85%B7q%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"categories":null,"content":"苹果 cms 自定义对接微信公众号 ","date":"0001年01月01日","objectID":"/2020-04-14-%E8%8B%B9%E6%9E%9C-cms-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/:1:0","tags":["python","苹果CMS，宝塔"],"title":"苹果 cms 自定义对接微信公众号","uri":"/2020-04-14-%E8%8B%B9%E6%9E%9C-cms-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"},{"categories":null,"content":"概述 苹果 cms 自带的微信对接能实现关注回复、少量关键字词回复， 功能很鸡肋，对接并没有什么乱用。所以自己用就学习了下怎么自己对接， 逻辑：用python的requests库调用苹果自己的开放接口，获得列表信息，用webrobot对接微信。 ","date":"0001年01月01日","objectID":"/2020-04-14-%E8%8B%B9%E6%9E%9C-cms-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/:1:1","tags":["python","苹果CMS，宝塔"],"title":"苹果 cms 自定义对接微信公众号","uri":"/2020-04-14-%E8%8B%B9%E6%9E%9C-cms-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"},{"categories":null,"content":"实现方式 苹果 cms 后台开启开放 api，默认关闭的。 https://ae01.alicdn.com/kf/H9445613f6057452ca17022526abe8f799.pnghttps://ae01.alicdn.com/kf/H9445613f6057452ca17022526abe8f799.png \" https://ae01.alicdn.com/kf/H9445613f6057452ca17022526abe8f799.png 安装脚本用到的 python 库 #最新版本引入模块失败会，没有找到解决方法 pip install werobot=0.6.1 pip install requests 创建 python 脚本，wx.py #!/usr/bin/evn python # coding=utf-8 import werobot,requests,json,sys reload(sys) sys.setdefaultencoding('utf8') from werobot.reply import ArticlesReply, Article robot = werobot.WeRoBot(token='robot')//自定义令牌，公众号会用到 # 被关注回复信息 @robot.subscribe def subscribe(message): return '''欢迎关注YY影院 1.输入要搜索的视频即可获得影片信息 2.输入 `博客` 关键字可以获取我的博客地址 ''' # 关键字 博客 回复 @robot.filter('博客') def echo(message): reply = ArticlesReply(message=message) article=Article( title=\"blog of Jw\", description=\"Jw的博客\", img=\"https://ae01.alicdn.com/kf/H06e4467cda7449bc84ffc8215e9bb0ca6.png\", url=\"https://blog.gojw.xyz\" ) reply.add_article(article) return reply #影片查询 @robot.text def findvedio(message,session): d = {'wd': message.content} #后台开放api地址 results = requests.get('http://yyqqz.com/api.php/provide/vod/ac=list', params=d).json() return_value ='' total=results['total'] if total==0: return '没有搜索到您想要的信息，请私聊站长帮忙' for row in results['list']: Name = row['vod_name'] burl='https://yyqqz.com/voddetail/'+str(row['vod_id']) return_value += '名称: %s\\n' % Name return_value += '详情: %s\\n' % burl return return_value #收到图片的回复 @robot.image def getImage(message): return'This is a picture!' #配置端口3008,微信对接只支持80和443端口，所以需要反向代理下，看第4步 robot.config['HOST'] = '0.0.0.0' robot.config['PORT'] = 3008 直接在网站配置末尾添加 https://ae01.alicdn.com/kf/H6d35bd2b655a42df84d3a4a33e7a986dT.pnghttps://ae01.alicdn.com/kf/H6d35bd2b655a42df84d3a4a33e7a986dT.png \" https://ae01.alicdn.com/kf/H6d35bd2b655a42df84d3a4a33e7a986dT.png upstream robot.yyqqz.com { server localhost:3008; } server { listen 80; server_name robot.yyqqz.com;#所有访问子域名robot.yyqqz.com代理到 robot.yyqqz.com的upstream,也就是本地的3008端口 location / { proxy_pass http://robot.yyqqz.com; } } 域名解析参考 https://ae01.alicdn.com/kf/H38c1ac05ab0045a381f101e0054d72ce6.pnghttps://ae01.alicdn.com/kf/H38c1ac05ab0045a381f101e0054d72ce6.png \" https://ae01.alicdn.com/kf/H38c1ac05ab0045a381f101e0054d72ce6.png 启动服务 python wx.py 如果全都调试完毕，让脚本后台运行即可 nohup python wx.py \u0026 微信公众号设置服务器地址和令牌 在开发–\u003e基本配置 ，设置你的服务地址和令牌 https://ae01.alicdn.com/kf/He39e055ff25e4cff8a106a6785fe84baR.pnghttps://ae01.alicdn.com/kf/He39e055ff25e4cff8a106a6785fe84baR.png \" https://ae01.alicdn.com/kf/He39e055ff25e4cff8a106a6785fe84baR.png 效果 https://ae01.alicdn.com/kf/Hb21a95265bc64805afb24df2169e2558r.jpghttps://ae01.alicdn.com/kf/Hb21a95265bc64805afb24df2169e2558r.jpg \" https://ae01.alicdn.com/kf/Hb21a95265bc64805afb24df2169e2558r.jpg ","date":"0001年01月01日","objectID":"/2020-04-14-%E8%8B%B9%E6%9E%9C-cms-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/:1:2","tags":["python","苹果CMS，宝塔"],"title":"苹果 cms 自定义对接微信公众号","uri":"/2020-04-14-%E8%8B%B9%E6%9E%9C-cms-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"},{"categories":null,"content":"参考 [1]werobot中文文档 ","date":"0001年01月01日","objectID":"/2020-04-14-%E8%8B%B9%E6%9E%9C-cms-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/:1:3","tags":["python","苹果CMS，宝塔"],"title":"苹果 cms 自定义对接微信公众号","uri":"/2020-04-14-%E8%8B%B9%E6%9E%9C-cms-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E6%8E%A5%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"},{"categories":null,"content":"苹果cms设置阿里云本地播放器 ","date":"0001年01月01日","objectID":"/2020-04-10-%E8%8B%B9%E6%9E%9CCMS%E8%AE%BE%E7%BD%AEaliplayer%E6%92%AD%E6%94%BE%E5%99%A8/:1:0","tags":null,"title":"苹果CMS设置aliplayer播放器","uri":"/2020-04-10-%E8%8B%B9%E6%9E%9CCMS%E8%AE%BE%E7%BD%AEaliplayer%E6%92%AD%E6%94%BE%E5%99%A8/"},{"categories":null,"content":"编辑 aliplayer.html \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003cmeta http-equiv=\"x-ua-compatible\" content=\"IE=edge\" \u003e \u003cmeta name=\"viewport\" content=\"width=device-width, height=device-height, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no\"/\u003e \u003ctitle\u003eAliplay记忆播放器\u003c/title\u003e \u003clink rel=\"stylesheet\" href=\"https://g.alicdn.com/de/prismplayer/2.8.7/skins/default/aliplayer-min.css\" /\u003e \u003cscript type=\"text/javascript\" charset=\"utf-8\" src=\"https://g.alicdn.com/de/prismplayer/2.8.7/aliplayer-min.js\"\u003e\u003c/script\u003e \u003cscript type=\"text/javascript\" charset=\"utf-8\" src=\"https://player.alicdn.com/aliplayer/presentation/js/aliplayercomponents.min.js\"\u003e\u003c/script\u003e \u003cstyle type=\"text/css\"\u003e body,html{background-color:#000;padding: 0;margin: 0;width:100%;height:100%;} #liryCN{width:100%;height:100%;padding:0;margin:0;display:block;} \u003c/style\u003e \u003c/head\u003e \u003cbody\u003e \u003cdiv id=\"liryCN\" class=\"prism-player\"\u003e\u003c/div\u003e \u003cscript type=\"text/javascript\"\u003e var player = new Aliplayer({ id: \"liryCN\", \"source\": parent.MacPlayer.PlayUrl, width: \"100%\", height: \"100%\", autoplay: true, preload: true, rePlay: false, playsinline: false, useH5Prism: false, isLive: false, autoPlayDelay: 0, autoPlayDelayDisplayText: 'YY影院,请稍待正在加载...', components: [{ name: 'MemoryPlayComponent', type: AliPlayerComponent.MemoryPlayComponent, args: [true] }], }, function (player) { player.play(); } ); player.on('ended',function(){ if(parent.MacPlayer.PlayLinkNext!=''){ top.location.href = parent.MacPlayer.PlayLinkNext; } }); var _video = document.querySelector('video'); player.on('play', function(e) { _video.removeEventListener('click', play); _video.addEventListener('click', pause); }); player.on('pause', function(e) { _video.removeEventListener('click', pause); _video.addEventListener('click', play) }); function play() { if (player) player.play(); } function pause() { if (player) player.pause(); } try{ //document.getElementById('liryCN').style.height = parent.MacPlayer.Height + 'px'; } catch(e){} \u003c/script\u003e \u003c/body\u003e \u003c/html\u003e 编辑好后上传到 网站目录/static/player/ 下 ","date":"0001年01月01日","objectID":"/2020-04-10-%E8%8B%B9%E6%9E%9CCMS%E8%AE%BE%E7%BD%AEaliplayer%E6%92%AD%E6%94%BE%E5%99%A8/:1:1","tags":null,"title":"苹果CMS设置aliplayer播放器","uri":"/2020-04-10-%E8%8B%B9%E6%9E%9CCMS%E8%AE%BE%E7%BD%AEaliplayer%E6%92%AD%E6%94%BE%E5%99%A8/"},{"categories":null,"content":"播放器代码填写 MacPlayer.Html = '\u003ciframe src=\"'+maccms.path+'/static/player/aliplayer.html\" width=\"100%\" height=\"'+MacPlayer.Height+'\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" scrolling=\"no\"\u003e\u003c/iframe\u003e'; MacPlayer.Show(); ","date":"0001年01月01日","objectID":"/2020-04-10-%E8%8B%B9%E6%9E%9CCMS%E8%AE%BE%E7%BD%AEaliplayer%E6%92%AD%E6%94%BE%E5%99%A8/:1:2","tags":null,"title":"苹果CMS设置aliplayer播放器","uri":"/2020-04-10-%E8%8B%B9%E6%9E%9CCMS%E8%AE%BE%E7%BD%AEaliplayer%E6%92%AD%E6%94%BE%E5%99%A8/"},{"categories":null,"content":"aliplayer播放器效果 https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200412012802.pnghttps://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200412012802.png \" https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200412012802.png ","date":"0001年01月01日","objectID":"/2020-04-10-%E8%8B%B9%E6%9E%9CCMS%E8%AE%BE%E7%BD%AEaliplayer%E6%92%AD%E6%94%BE%E5%99%A8/:2:0","tags":null,"title":"苹果CMS设置aliplayer播放器","uri":"/2020-04-10-%E8%8B%B9%E6%9E%9CCMS%E8%AE%BE%E7%BD%AEaliplayer%E6%92%AD%E6%94%BE%E5%99%A8/"},{"categories":null,"content":"概述 苹果 CMS 搭建视频网站，定时采集视频,对接微信公众号。 搭建成功的样子：演示地址 ","date":"0001年01月01日","objectID":"/2020-04-04-%E8%8B%B9%E6%9E%9C-CMS-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99/:1:0","tags":["linux","宝塔","视频网站"],"title":"苹果 CMS 快速搭建一个视频网站","uri":"/2020-04-04-%E8%8B%B9%E6%9E%9C-CMS-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99/"},{"categories":null,"content":"环境安装 安装环境：centos7 + php7.2 + mysql5.6 用到的文件：mac10 ","date":"0001年01月01日","objectID":"/2020-04-04-%E8%8B%B9%E6%9E%9C-CMS-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99/:2:0","tags":["linux","宝塔","视频网站"],"title":"苹果 CMS 快速搭建一个视频网站","uri":"/2020-04-04-%E8%8B%B9%E6%9E%9C-CMS-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99/"},{"categories":null,"content":"搭建过程 安装宝塔面板（宝塔官网） yum install -y wget \u0026\u0026 wget -O install.sh http://download.bt.cn/install/install_6.0.sh \u0026\u0026 sh install.sh 命令行输入bt，根据提示可以取消登录限制和修改登录用户和密码 访问默认8888端口，安装环境记得选择php7.2 创建一个站点 将苹果 CMS 源码上传到站点根目录并解压 上传的压缩文件都需要解压记得 常用目录 设置网站 https 支持 访问域名即可看到,初始化配置，设置之前的数据库信息,设置完成再次访问域名就可以了。 访问 你的域名/admin.php ,进入后台，可能会提示你重命名admin.php，为了安全 绑定自定义采集资源 填入资源网址：http://cj.yongjiuzyw.com/inc/s_yjm3u8.php 绑定要采集的分类，不绑定采集不成功 设置播放器 选择 dplayer 即可，m38u的资源，先采集一个资源记得，做实验，后面再批量采集。推荐本地播放器，无广告。 附录：苹果cms设置aliplayer播放器 效果：播放效果 定时任务 复制要采集的定时任务链接 复制定时任务调用的链接 利用宝塔来定时的执行定时任务 ","date":"0001年01月01日","objectID":"/2020-04-04-%E8%8B%B9%E6%9E%9C-CMS-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99/:3:0","tags":["linux","宝塔","视频网站"],"title":"苹果 CMS 快速搭建一个视频网站","uri":"/2020-04-04-%E8%8B%B9%E6%9E%9C-CMS-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99/"},{"categories":null,"content":"微信对接苹果 CMS 打开 系统 –\u003e 微信对接配置 依次设置你的域名即可。 登录你的微信公众平台 选择 开发 –\u003e 基本配置 –\u003e 服务器配置 填写之后进行测试即可，失败的话可以清缓存重试 登录你的微信公众平台 选择 开发 –\u003e 基本配置 –\u003e 服务器配置 https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200404152547.pnghttps://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200404152547.png \" https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200404152547.png 填写之后进行测试即可，失败的话可以清缓存重试 ","date":"0001年01月01日","objectID":"/2020-04-04-%E8%8B%B9%E6%9E%9C-CMS-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99/:4:0","tags":["linux","宝塔","视频网站"],"title":"苹果 CMS 快速搭建一个视频网站","uri":"/2020-04-04-%E8%8B%B9%E6%9E%9C-CMS-%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99/"},{"categories":null,"content":"两种代理原理 jdk动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。 cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。 ","date":"0001年01月01日","objectID":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/:1:0","tags":["spring","动态代理"],"title":"spring中的动态代理","uri":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"},{"categories":null,"content":"spring对代理的选择 如果目标类实现了接口，默认情况下会采用JDK的动态代理实现AOP 如果目标类实现了接口，可以强制使用CGLIB实现AOP 如果目标类没有实现了接口，必须采用CGLIB库，spring会自动在JDK动态代理和CGLIB之间转换 ","date":"0001年01月01日","objectID":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/:2:0","tags":["spring","动态代理"],"title":"spring中的动态代理","uri":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"},{"categories":null,"content":"JDK动态代理和CGLIB字节码生成的区别？ JDK动态代理需要目标类实现接口 CGLIB是针对类实现代理，主要是对指定的类生成子类，覆盖其中的方法 因为是继承，所以该类或方法最好不要声明成final CGLIB性能更好 ","date":"0001年01月01日","objectID":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/:3:0","tags":["spring","动态代理"],"title":"spring中的动态代理","uri":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"},{"categories":null,"content":"JDK动态代理实现 定义目标类的接口 public interface business { void execute(); } 目标类实现接口 public class businessIml implements business { public void execute() { System.out.println(\"业务处理\"); } } 代理类 public class businessInvacationHandler implements InvocationHandler { private Object target; //proxy指代理的对象,method指代理对象的某个方法,args指该方法接受的参数 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\"业务处理前\"); Object result = method.invoke(target, args); System.out.println(\"业务处理后\"); return result; } /* loader:　一个ClassLoader对象，定义了由哪个ClassLoader对象来对生成的代理对象进行加载 interfaces:　一个Interface对象的数组，表示的是我将要给我需要代理的对象提供一组什么接口， 如果我提供了一组接口给它， 那么这个代理对象就宣称实现了该接口(多态)，这样我就能调用这组接口中的方法了 h:　一个InvocationHandler对象，表示的是当我这个动态代理对象在调用方法的时候，会关联到哪一个InvocationHandler对象上*/ public Object getProxy(Object object) { this.target=object; return Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), this); } } public static void main(String[] args) { businessIml businessIml = new businessIml(); business proxy = (business)new businessInvacationHandler().getProxy(businessIml); proxy.execute(); } ","date":"0001年01月01日","objectID":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/:4:0","tags":["spring","动态代理"],"title":"spring中的动态代理","uri":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"},{"categories":null,"content":"CGLIB 代理实现 引入依赖 \u003cdependency\u003e \u003cgroupId\u003ecglib\u003c/groupId\u003e \u003cartifactId\u003ecglib\u003c/artifactId\u003e \u003cversion\u003e3.2.4\u003c/version\u003e \u003c/dependency\u003e 代理类 public class BusinessProxy implements MethodInterceptor { public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { System.out.println(\"业务处理前\"); Object result = methodProxy.invokeSuper(o, args); System.out.println(\"业务处理后\"); return result; } public Object getProxy(Class\u003c?\u003e clazz) { Enhancer enhancer = new Enhancer();//用于创建子类 enhancer.setSuperclass(clazz);//设置父类 enhancer.setCallback(this);//回调方法的参数为代理类对象BusinessProxy // ，最后增强目标类调用的是代理类对象BusinessProxy中的intercept方法 return enhancer.create(); } } public static void main(String[] args) { businessIml proxy = (businessIml) new BusinessProxy(). getProxy(businessIml.class); proxy.execute(); } ","date":"0001年01月01日","objectID":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/:5:0","tags":["spring","动态代理"],"title":"spring中的动态代理","uri":"/2020-03-25-spring%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"},{"categories":null,"content":"概述 省去在 index.html一个一个引入 js 和 cs 文件，直接在配置文件引入。 ","date":"0001年01月01日","objectID":"/2020-03-23-Vuecli3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%BC%95%E5%85%A5cdn%E5%8A%A0%E9%80%9F/:1:0","tags":["Vue","cdn"],"title":"Vue@cli3配置文件引入cdn加速","uri":"/2020-03-23-Vuecli3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%BC%95%E5%85%A5cdn%E5%8A%A0%E9%80%9F/"},{"categories":null,"content":"过程 安装插件 html-webpack-plugin npm install --save-dev html-webpack-plugin 在 package.json 同级目录新建 vue.config.js 引入插件 const HtmlWebpackPlugin = require('html-webpack-plugin') 设置要排除的引入 const externals = { vue: 'Vue', 'vue-router': 'VueRouter', vuex: 'Vuex', axios: 'axios' } const cdn = { // 开发环境 dev: { css: [ ], js: [ ] }, // 生产环境 build: { css: [ ], js: [ 'https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.min.js', 'https://cdn.bootcss.com/vue-router/3.0.3/vue-router.min.js', 'https://cdn.bootcss.com/vuex/3.0.1/vuex.min.js', 'https://cdn.bootcss.com/axios/0.19.0/axios.min.js', ] } } 5.两种方式配置 方式1 module.exports = { configureWebpack: config =\u003e { const myConfig = {} if (process.env.NODE_ENV === 'production') { // 为生产环境修改配置... //externals里的模块不打包 // Object.assign(config, { // externals: externals // }) myConfig.externals = externals } else { // 为开发环境修改配置... myConfig.devServer = { disableHostCheck: true } } return myConfig }, chainWebpack: config =\u003e { // 对vue-cli内部的 webpack 配置进行更细粒度的修改 config.plugin('html').tap(args =\u003e { if (process.env.NODE_ENV === 'production') { args[0].cdn = cdn.build } if (process.env.NODE_ENV === 'development') { args[0].cdn = cdn.dev } return args }) } 方式2（更简单一些） module.exports = { configureWebpack: config =\u003e { if (process.env.NODE_ENV === 'production') { // 为生产环境修改配置... //externals里的模块不打包 Object.assign(config, { externals: externals }) } else { // 为开发环境修改配置... } }, chainWebpack: config =\u003e { // 对vue-cli内部的 webpack 配置进行更细粒度的修改 config.plugin('html').tap(args =\u003e { if (process.env.NODE_ENV === 'production') { args[0].cdn = cdn.build } if (process.env.NODE_ENV === 'development') { args[0].cdn = cdn.dev } return args }) } 在 public/index.html 遍历js，css \u003c!-- 使用CDN加速的CSS文件，配置在vue.config.js下 --\u003e \u003c% for (var i in htmlWebpackPlugin.options.cdn\u0026\u0026htmlWebpackPlugin.options.cdn.css) { %\u003e \u003clink href=\"\u003c%= htmlWebpackPlugin.options.cdn.css[i] %\u003e\" rel=\"preload\" as=\"style\" /\u003e \u003clink href=\"\u003c%= htmlWebpackPlugin.options.cdn.css[i] %\u003e\" rel=\"stylesheet\" /\u003e \u003c% } %\u003e \u003c!-- \u003cscript src=\"https://cdn.bootcss.com/vue/2.6.11/vue.min.js\"\u003e\u003c/script\u003e --\u003e \u003c!-- 使用CDN加速的JS文件，配置在vue.config.js下 --\u003e \u003c% for (var i in htmlWebpackPlugin.options.cdn \u0026\u0026 htmlWebpackPlugin.options.cdn.js) { %\u003e \u003cscript src=\"\u003c%= htmlWebpackPlugin.options.cdn.js[i] %\u003e\" rel=\"preload\" \u003e\u003c/script\u003e \u003c% } %\u003e \u003c/head\u003e \u003cbody\u003e \u003cnoscript\u003e \u003cstrong\u003eWe're sorry but \u003c%= htmlWebpackPlugin.options.title %\u003e doesn't work properly without JavaScript enabled. Please enable it to continue.\u003c/strong\u003e \u003c/noscript\u003e \u003cdiv id=\"app\"\u003e\u003c/div\u003e \u003c!-- built files will be auto injected --\u003e \u003c/body\u003e \u003c!-- 使用CDN加速的JS文件，配置在vue.config.js下 --\u003e \u003c!-- \u003c% for (var i in htmlWebpackPlugin.options.cdn\u0026\u0026htmlWebpackPlugin.options.cdn.js) { %\u003e \u003cscript src=\"\u003c%= htmlWebpackPlugin.options.cdn.js[i] %\u003e\"\u003e\u003c/script\u003e \u003c% } %\u003e --\u003e \u003c!-- built files will be auto injected --\u003e ","date":"0001年01月01日","objectID":"/2020-03-23-Vuecli3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%BC%95%E5%85%A5cdn%E5%8A%A0%E9%80%9F/:2:0","tags":["Vue","cdn"],"title":"Vue@cli3配置文件引入cdn加速","uri":"/2020-03-23-Vuecli3%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%BC%95%E5%85%A5cdn%E5%8A%A0%E9%80%9F/"},{"categories":null,"content":"MySQL 几种时间对比 类型 字节 格式 应用场景 是否支持设置系统默认值 范围 date 3 YYYY-MM-DD 精确到天 不支持 1000-01-01/9999-12-31 time 3 HH : MM : SS 每天的时间 不支持 ‘-838:59:59’/‘838:59:59’ year 1 YYYY 只要年份 不支持 1901/2155 datetime 8 YYYY- MM -DD HH : MM :SS 精确到秒 MySQL 5.6.5支持 1000-01-01 00:00:00/9999-12-31 23:59:59 timestamp 4 YYYYMMDD HHMMSS 精确到秒或毫秒，时间戳，系统用于不同时区 支持 1970-01-01 00:00:00/2038 结束时间是第 2147483647 秒，北京时间 2038-1-19 11:14:07，格林尼治时间 2038年1月19日 凌晨 03:14:07 ","date":"0001年01月01日","objectID":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/:1:0","tags":["MySQL"],"title":"MySQL插入当前时间、自动更新时间","uri":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/"},{"categories":null,"content":"MySQL 插入时间 NOW()函数以『YYYY-MM-DD HH: MM :SS』返回当前的日期时间，可以直接存到 DATETIME 字段中。 CURDATE()以『YYYY- MM -DD』的格式返回今天的日期，可以直接存到 DATE 字段中。 CURTIME()以『HH: MM :SS』的格式返回当前的时间，可以直接存到 TIME 字段中。 ","date":"0001年01月01日","objectID":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/:2:0","tags":["MySQL"],"title":"MySQL插入当前时间、自动更新时间","uri":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/"},{"categories":null,"content":"设置表字段默认 创建时间、更新时间 默认为创建时间(修改行后时间不会变化) ALTER TABLE tab_name MODIFY COLUMN create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP 修改行自动更新时间 ALTER TABLE tab_name MODIFY COLUMN update_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP ","date":"0001年01月01日","objectID":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/:3:0","tags":["MySQL"],"title":"MySQL插入当前时间、自动更新时间","uri":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/"},{"categories":null,"content":"MySQL 日期计算 MySQL 为日期增加一个时间间隔：date_add() set @dt = now(); select date_add(@dt, interval 1 day); -- add 1 day select date_add(@dt, interval 1 hour); -- add 1 hour select date_add(@dt, interval 1 minute); -- ... select date_add(@dt, interval 1 second); select date_add(@dt, interval 1 microsecond); select date_add(@dt, interval 1 week); select date_add(@dt, interval 1 month); select date_add(@dt, interval 1 quarter); select date_add(@dt, interval 1 year); select date_add(@dt, interval -1 day); -- sub 1 day MySQL 为日期减去一个时间间隔：date_sub()，和 date_add() 类似 mysql\u003e select date_sub('1998-01-01 00:00:00', interval '1 1:1:1' day_second); +----------------------------------------------------------------+ | date_sub('1998-01-01 00:00:00', interval '1 1:1:1' day_second) | +----------------------------------------------------------------+ | 1997-12-30 22:58:59 | +----------------------------------------------------------------+ 两个日期相减 date1 - date2，返回天数。 select datediff('2008-08-08', '2008-08-01'); -- 7 select datediff('2008-08-01', '2008-08-08'); -- -7 两个日期相减 time1 - time2，返回 time 差值。 select timediff('2008-08-08 08:08:08', '2008-08-08 00:00:00'); -- 08:08:08 select timediff('08:08:08', '00:00:00'); -- 08:08:08 MySQL 时间戳（timestamp）转换、增、减函数： select timestamp('2008-08-08'); -- 2008-08-08 00:00:00 按格式加 select timestamp('2008-08-08 08:00:00', '01:01:01'); -- 2008-08-08 09:01:01 按格式加 select timestamp('2008-08-08 08:00:00', '10 01:01:01'); -- 2008-08-18 09:01:01 加一天 select timestampadd(day, 1, '2008-08-08 08:00:00'); -- 2008-08-09 08:00:00 select date_add('2008-08-08 08:00:00', interval 1 day); -- 2008-08-09 08:00:00 timestampdiff(option,time1,time2)-- time2-time1 select timestampdiff(year,'2002-05-01','2001-01-01'); -- -1 select timestampdiff(day ,'2002-05-01','2001-01-01'); -- -485 select timestampdiff(hour,'2008-08-08 12:00:00','2008-08-08 00:00:00'); -- -12 select datediff('2008-08-08 12:00:00', '2008-08-01 00:00:00'); -- 7 时间戳计算时间差 \u003e date计算时间差 ","date":"0001年01月01日","objectID":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/:4:0","tags":["MySQL"],"title":"MySQL插入当前时间、自动更新时间","uri":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/"},{"categories":null,"content":"MySQL 时区（timezone）转换函数 convert_tz(dt,from_tz,to_tz) select convert_tz('2020-03-20 22:15:32', '+00:00', '+08:00'); -- 2020-03-21 06:15:32 ","date":"0001年01月01日","objectID":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/:5:0","tags":["MySQL"],"title":"MySQL插入当前时间、自动更新时间","uri":"/2020-03-20-MySQL%E4%B8%AD%E7%9A%84%E6%97%B6%E9%97%B4/"},{"categories":null,"content":"概述 这篇主要讲如何搭建自己的科学上网服务，现在常见的的搭建方式有： SSR『机场主常用，现在容易被封，不建议』 V2Ray 『建议，现在用的比较多』 ","date":"0001年01月01日","objectID":"/2020-03-20-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/:1:0","tags":["科学上网","vps"],"title":"科学上网如何搭建","uri":"/2020-03-20-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/"},{"categories":null,"content":"搭建 一般都是一键的脚本安装，有造好的轮子，直接拿来用就可以了。 远程连接服务器，直接执行，一般不会出问题。 bash \u003c(curl -Ls https://blog.sprov.xyz/v2-ui.sh) 不出意外就安装好了 https://ae01.alicdn.com/kf/H1a67c6f159514e91a7138ea5a2130fffl.pnghttps://ae01.alicdn.com/kf/H1a67c6f159514e91a7138ea5a2130fffl.png \" https://ae01.alicdn.com/kf/H1a67c6f159514e91a7138ea5a2130fffl.png 默认端口 65432 ，需要修改请按选项修改 选择协议 https://ae01.alicdn.com/kf/H01c6ea4415e641c29174fb59cc3abb55T.pnghttps://ae01.alicdn.com/kf/H01c6ea4415e641c29174fb59cc3abb55T.png \" https://ae01.alicdn.com/kf/H01c6ea4415e641c29174fb59cc3abb55T.png 一般选择前两种，第二种最简单 第二种，加密选择这个，对手机端友好似乎，一般我选择 chacha20-poly3305, shadowsocks 速度快，但是加密简单。 https://ae01.alicdn.com/kf/H55f3bb03638e411d8a9e3da41ef914369.pnghttps://ae01.alicdn.com/kf/H55f3bb03638e411d8a9e3da41ef914369.png \" https://ae01.alicdn.com/kf/H55f3bb03638e411d8a9e3da41ef914369.png 第一种，组合配置很多，都是根据 vmess 协议加密，说下最难配置的，vmess+ws+tls，使用域名登录注意，服务器没上传证书的话，也可以用证书内容代替，建议改为路径的，服务器设置自动续签证书，证书申请见 续签，如果隐藏ip,cdn的话注意cdn支持的端口，文章末尾贴一下。 https://ae01.alicdn.com/kf/H3b015b0215d44beca24159f16c453f4c3.pnghttps://ae01.alicdn.com/kf/H3b015b0215d44beca24159f16c453f4c3.png \" https://ae01.alicdn.com/kf/H3b015b0215d44beca24159f16c453f4c3.png ","date":"0001年01月01日","objectID":"/2020-03-20-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/:2:0","tags":["科学上网","vps"],"title":"科学上网如何搭建","uri":"/2020-03-20-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/"},{"categories":null,"content":"开启 bbrplus 加速 几种加速方式，bbrplus较为稳定，你可以多做尝试。下面给出两种，一种只适合bbrplus（centos7） bbrplus(centos7) 其他加速方式一键脚本 中间等待时间可能较长，别以为是脚本出问题了。还有的加速无法安装，和你选的系统有关。 ","date":"0001年01月01日","objectID":"/2020-03-20-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/:3:0","tags":["科学上网","vps"],"title":"科学上网如何搭建","uri":"/2020-03-20-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/"},{"categories":null,"content":"cloudflare cdn支持端口 https://ae01.alicdn.com/kf/Hdfe2d328f96941cc9737806c37c50f82T.pnghttps://ae01.alicdn.com/kf/Hdfe2d328f96941cc9737806c37c50f82T.png \" https://ae01.alicdn.com/kf/Hdfe2d328f96941cc9737806c37c50f82T.png ","date":"0001年01月01日","objectID":"/2020-03-20-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/:4:0","tags":["科学上网","vps"],"title":"科学上网如何搭建","uri":"/2020-03-20-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA/"},{"categories":null,"content":" TOC {:toc} ","date":"2019年03月19日","objectID":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/:0:0","tags":["centos","jekyll","github"],"title":"centos7安装jekyll(自动拉取GitHub提交)","uri":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/"},{"categories":null,"content":"rvm安装jekyll安装 githubpages 运行的jekyll响应太慢，于是决定放到主机上，并实现提交到github的文件，主机自动拉取,jekyll自动渲染。 利用 docker-compose 快速安装 nginx，提供https支持，申请证书可以参考这篇，免费证书，自动续签。 ","date":"2019年03月19日","objectID":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/:1:0","tags":["centos","jekyll","github"],"title":"centos7安装jekyll(自动拉取GitHub提交)","uri":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/"},{"categories":null,"content":"流程图 ","date":"2019年03月19日","objectID":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/:2:0","tags":["centos","jekyll","github"],"title":"centos7安装jekyll(自动拉取GitHub提交)","uri":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/"},{"categories":null,"content":"jekyll ruby环境 gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB curl -sSL https://get.rvm.io | bash -s stable source /etc/profile.d/rvm.sh 安装 ruby 2.4.2 rvm install 2.4.2 jekyll环境 yum install ruby-full build-essential zlib1g-dev 以下命令会将环境变量添加到〜/ .bashrc文件中，以配置gem安装路径 echo '# Install Ruby Gems to ~/gems' \u003e\u003e ~/.bashrc echo 'export GEM_HOME=\"$HOME/gems\"' \u003e\u003e ~/.bashrc echo 'export PATH=\"$HOME/gems/bin:$PATH\"' \u003e\u003e ~/.bashrc source ~/.bashrc jekyll安装 gem install jekyll bundler 可能遇到 RubyGems 版本太低，按提示升级，重新安装 jekyll 漫长等待。。。jekyll安装好了就 也可能提示 rubygem版本低，升级就可以了 gem install rubygems-update update_rubygems gem update --system ","date":"2019年03月19日","objectID":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/:3:0","tags":["centos","jekyll","github"],"title":"centos7安装jekyll(自动拉取GitHub提交)","uri":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/"},{"categories":null,"content":"自动拉取相关 原理就是 push 到 github 仓库后，github回调一个地址，本地用node.js接收回调，执行脚本，拉取仓库并让jekyll重新渲染，也可以设置增量渲染 centos7.7安装node rpm -ivh https://dl.fedoraproject.org/pub/epel/7/x86_64/Packages/e/epel-release-7-11.noarch.rpm yum install -y nodejs 安装 github-webhook-handler ，主要靠它webhook npm install -g github-webhook-handler #安装 github-webhook-handler 进入目录，脚本再这里，可以直接引入到js文件中， cd /usr/lib/node_modules/github-webhook-handler js文件,需要修改的文件已经注释 参考图片设置 webhook var http = require('http') var createHandler = require('github-webhook-handler') var handler = createHandler({ path: '/deploy', secret: 'password' }) //监听请求路径，和Github 配置的密码 function run_cmd(cmd, args, callback) { var spawn = require('child_process').spawn; var child = spawn(cmd, args); var resp = \"\"; child.stdout.on('data', function(buffer) { resp += buffer.toString(); }); child.stdout.on('end', function() { callback (resp) }); } http.createServer(function (req, res) { handler(req, res, function (err) { res.statusCode = 404 res.end('no such location') }) }).listen(3006)//监听的端口 handler.on('error', function (err) { console.error('Error:', err.message) }) handler.on('push', function (event) { console.log('Received a push event for %s to %s', event.payload.repository.name, event.payload.ref); run_cmd('sh', ['/usr/local/depoly.sh'], function(text){ console.log(text) });//成功后，执行的脚本。 }) shell脚本 deploy.sh #!/bin/bash gitname=jw-star #修改为你的仓库 cd /blog/${gitname}.github.io echo start pull from github git pull http://github.com/${gitname}/${gitname}.github.io.git echo start build.. jekyll build --destination=/blog/site #设置渲染到哪个目录 为了让 deploy.js 持续运行 ，安装 forever 守护进程， npm install forever -g #安装 常见参数 -a, –append: 合并日志 -l LOGFILE: 输出日志到LOGFILE forever list : 查看日志位置，可以根据日志判断脚本执行情况 启动脚本 forever start -a -l forever.log deploy.js 成功的话在 site 目录下会有渲染好的文件 Nginx相关 docker 安装参考 这篇 docker-compose 参考 https://docs.docker.com/compose/install/ 先贴一下整体目录结构 tree -L 2 /blog/ #- L 2子目录显示到两层 docker-compose.yml version:'3'services:nginx:container_name:nginx# build:# context: .# dockerfile: ./nginx/Dockerfileimage:\"nginx:latest\"restart:always#出现错误自动重启volumes:- ./site:/usr/share/nginx/html#站点目录映射到容器的目录- ./nginx/conf.d/:/etc/nginx/conf.d#映射配置文件到容器目录ports:- 443:443 default.conf server { listen 443 ssl; server_name localhost; ssl on; #强制https,这是趋势 ssl_certificate /etc/nginx/conf.d/fullchain.cer; ssl_certificate_key /etc/nginx/conf.d/gojw.xyz.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; # 指定密码为openssl支持的格式 ssl_protocols SSLv2 SSLv3 TLSv1.2; ssl_ciphers HIGH:!aNULL:!MD5; # 密码加密方式 ssl_prefer_server_ciphers on; # 依赖SSLv3和TLSv1协议的服务器密码将优先于客户端密码 location / { root /usr/share/nginx/html; index index.html index.htm; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } 启动服务 docker-compose up -d #-d 后台启动 ","date":"2019年03月19日","objectID":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/:4:0","tags":["centos","jekyll","github"],"title":"centos7安装jekyll(自动拉取GitHub提交)","uri":"/2020-03-19-centos7%E5%AE%89%E8%A3%85jekyll/"},{"categories":null,"content":"jekyll编辑器 费尽千辛万苦搭建好了自己的博客，没有一个好的编辑器肯定说不过去啊，于是从网上搜索一番，嘿嘿。 ","date":"0001年01月01日","objectID":"/2020-03-19-jekyll%E7%BC%96%E8%BE%91%E5%99%A8-Jkyll-Editor/:1:0","tags":["jekyll","编辑器，markdown"],"title":"jekyll编辑器 Jkyll Editor","uri":"/2020-03-19-jekyll%E7%BC%96%E8%BE%91%E5%99%A8-Jkyll-Editor/"},{"categories":null,"content":"编辑器名字：Jekyll Editor 插件地址：https://chrome.google.com/webstore/detail/jekyll-editor/dfdkgbhjmllemfblfoohhehdigokocme https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319154300.pnghttps://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319154300.png \" https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319154300.png 这款插件简直了，简洁不能再简洁了，特色就是登陆 github，提交到仓库，还可以设置元文件，省去了写头文件，很:ok_hand: ","date":"0001年01月01日","objectID":"/2020-03-19-jekyll%E7%BC%96%E8%BE%91%E5%99%A8-Jkyll-Editor/:2:0","tags":["jekyll","编辑器，markdown"],"title":"jekyll编辑器 Jkyll Editor","uri":"/2020-03-19-jekyll%E7%BC%96%E8%BE%91%E5%99%A8-Jkyll-Editor/"},{"categories":null,"content":"使用技巧 安装插件后我不小心关闭了，你敢信我找不到它了！！！ https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319155011.pnghttps://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319155011.png \" https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319155011.png 找了半天，原来在这里，地址栏输入 chrome://apps/ https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319155200.pnghttps://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319155200.png \" https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319155200.png 总不能每次都输入吧，右击图标，添加到桌面，嗯，完美了。 ","date":"0001年01月01日","objectID":"/2020-03-19-jekyll%E7%BC%96%E8%BE%91%E5%99%A8-Jkyll-Editor/:3:0","tags":["jekyll","编辑器，markdown"],"title":"jekyll编辑器 Jkyll Editor","uri":"/2020-03-19-jekyll%E7%BC%96%E8%BE%91%E5%99%A8-Jkyll-Editor/"},{"categories":null,"content":" TOC {:toc} ","date":"0001年01月01日","objectID":"/2020-03-19-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE/:0:0","tags":["https证书"],"title":"免费https证书申请(自动续签)","uri":"/2020-03-19-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE/"},{"categories":null,"content":"概述 这篇文章主要讲如何为你的服务器快速申请 https 证书 ","date":"0001年01月01日","objectID":"/2020-03-19-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE/:1:0","tags":["https证书"],"title":"免费https证书申请(自动续签)","uri":"/2020-03-19-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE/"},{"categories":null,"content":"https证书的作用 1 加密客户和服务之间的信息 如果通过http协议访问网站，浏览器和服务器之间是明文传输，账号、密码等机密信息随时可能被泄露 、窃取、篡改。 部署https加密证书后，使用HTTPS加密协议访问网站，可激活客户端浏览器到网站服务器之前的『SSL加密通道』（SSL协议），实现高强度双向加密传输，防止传输数据泄露或篡改。 2 利于网站 SEO 优化，提高网页排名 部署了SSL证书的网站相比没有部署SSL证书的网站更加可信，更加安全，可以有效的保障用户的利益不受侵害。 因此搜索引擎如谷歌，百度在确保用户信息安全的角度，都在大力倡导网站部署SSL证书实现HTTPS加密访问。在搜索、展现、排序方面也给予部署了SSL证书网站的优待。 ","date":"0001年01月01日","objectID":"/2020-03-19-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE/:2:0","tags":["https证书"],"title":"免费https证书申请(自动续签)","uri":"/2020-03-19-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE/"},{"categories":null,"content":"利用acme.sh快速申请 https 证书 在~目录下，没有提示不要切换 curl https://get.acme.sh | sh 或者 wget -O - https://get.acme.sh | sh 或者 git clone https://github.com/Neilpang/acme.sh.git 获取域名绑定商提供的 DNS API ，还有登陆邮箱 常见域名服务商： CloudFlare选项： export CF_Key=\"sdfsdfsdfljlbjkljlkjsdfoiwje\" export CF_Email=\"xxxx@sss.com\" 证书颁发： ~/.acme.sh/acme.sh --issue --dns dns_cf -d *.example.com //直接泛域名方式，子域名也可以使用该证书 DNSPod.cn选项 export DP_Id=\"1234\" export DP_Key=\"sADDsdasdgdsf\" 证书颁发： ~/.acme.sh/acme.sh --issue --dns dns_dp -d *.example.com //直接泛域名方式，子域名也可以使用该证书 主要是变量名不一样，剩下的只列取变量和对应的厂商： 域名服务商 变量 - -dns简写 CloudFlare CF_Key CF_Email dns_cf DNSPod.cn DP_Id DP_Key dns_dp CloudXNS.com CX_Key CX_Secret dns_cx GoDaddy.com GD_Key GD_Secret dns_gd LuaDNS LUA_Key LUA_Email dns_lua DNSMadeEasy CX_Key CX_Secret dns_me Amazon Route53 AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY dns_aws Linode LINODE_API_KEY dns_linode FreeDNS 账号密码 FREEDNS_User FREEDNS_Password dns_freedns DigitalOcean DO_API_KEY dns_dgon NS1.com NS1_Key dns_nsone DNSPod.com DPI_Id DPI_Key dns_dpi 最后设置证书保存位置，自动更新会同步更新保存证书的位置 #设置证书和密钥存放位置，.cer就是证书，需要更换证书格式可以找个在线更换的网站 ~/.acme.sh/acme.sh --installcert -d gojw.xyz \\ --key-file /usr/local/gojw.xyz.key \\ --fullchain-file /usr/local/fullchain.cer \\ ","date":"0001年01月01日","objectID":"/2020-03-19-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE/:3:0","tags":["https证书"],"title":"免费https证书申请(自动续签)","uri":"/2020-03-19-%E5%85%8D%E8%B4%B9https%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7%E8%87%AA%E5%8A%A8%E7%BB%AD%E7%AD%BE/"},{"categories":null,"content":" TOC {:toc} ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:0:0","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"概述 阿里云国际使用中遇到的问题及解决方案 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:1:0","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"如何注册 地址：阿里云国际，优惠日期会自己推，不会过期 https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319200840.pnghttps://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319200840.png \" https://raw.githubusercontent.com/jw-star/myFigurebed/master/img/20200319200840.png 想要玩儿主机，首先得有主机。阿里云国际新手套餐购买条件： 一个 gv 号 + 一张 visa 卡。 注册的时候国家一定要选择美国 ，主要看你的gv号归属地了。 地址可以自己找，真实美国地址 注册的最后一步要求你填写信用卡或者 PayPal ，国内信用卡肯定 gg ,你可以尝试直接用 visa 卡，不行的话再注册 PayPal ，用绑定了 visa 卡的 PayPal 来注册阿里云国际。 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:2:0","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"如何购买主机 首页找2.5美元 选择配置购买，选择主机配置，新加坡地区 2.5$ ，香港最低 7$ ，简单说下，香港的有点就是延迟低。 新加坡最低主机实际包含配置：0.6$ 主机 + 1.9$ 的流量包，两者绑定，其他主机不能共享流量。 https://ae01.alicdn.com/kf/H86a75021b0294825bb4d87df2c7c786dN.pnghttps://ae01.alicdn.com/kf/H86a75021b0294825bb4d87df2c7c786dN.png \" https://ae01.alicdn.com/kf/H86a75021b0294825bb4d87df2c7c786dN.png ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:3:0","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"关于续费 续费还是和购买的时候价格一样，但是订单显示只扣除你 0.6 $，马上还会扣除你1.9$ 的流量包。 可以设置续费方式： 自动续费 手动续费 不再续费 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:4:0","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"连接方式 可以手动更换连接方式，默认秘钥连接。 秘钥和密码 秘钥连接 https://ae01.alicdn.com/kf/Hbacaaad0e4e547b697ec5ce8f3fc8b8aB.pnghttps://ae01.alicdn.com/kf/Hbacaaad0e4e547b697ec5ce8f3fc8b8aB.png \" https://ae01.alicdn.com/kf/Hbacaaad0e4e547b697ec5ce8f3fc8b8aB.png 选择秘钥对，创建秘钥对，保存秘钥到本地，把秘钥对绑定到主机，重启主机，本地用秘钥对访问。 密码连接 重装系统，会提示用密码连接 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:5:0","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"visa卡如何办？两种方案 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:6:0","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"visa 卡方法一:怕麻烦就某度搜一下，有卖的，60￥ 左右吧，之后充值还需要手续费。 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:6:1","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"visa 卡方法二:国内银行申请，我现在用的是招商银行的青年卡，申请成功后会带一张 visa 副卡，如果不怕麻烦申请的话，可以联系我『见网站导航 关于我 』，我邀请你注册。 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:6:2","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"不续费后果 数据保留15天。逾期未续费，实例将释放，数据不可恢复。 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:6:3","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"其他问题待续 ","date":"0001年01月01日","objectID":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/:7:0","tags":["vps","阿里云","linux"],"title":"阿里云国际vps食用指南","uri":"/2020-03-19-%E9%98%BF%E9%87%8C%E4%BA%91%E5%9B%BD%E9%99%85vps/"},{"categories":null,"content":"Hello World 我的后花园，啧啧 ","date":"0001年01月01日","objectID":"/2020-03-06-%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/:0:0","tags":[],"title":"ceshi Jw的第一篇博文","uri":"/2020-03-06-%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87/"}]